name: Taski CI/CD Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2
    
    - name: Clean Docker artifacts
      run: |
        docker system prune -a -f --volumes
        docker system df

  tests:
    runs-on: ubuntu-latest
    needs: cleanup
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./backend/requirements.txt

    - name: Run tests
      env:
        POSTGRES_USER: django_user
        POSTGRES_PASSWORD: django_password
        POSTGRES_DB: django_db
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      run: |
        flake8 backend/
        cd backend && python manage.py test api.tests

  build_and_push:
    runs-on: ubuntu-latest
    needs: tests
    strategy:
      matrix:
        image:
          - name: backend
            context: ./backend
            tag: kulevrina/backend:latest
          - name: frontend
            context: ./frontend
            tag: kulevrina/taski_frontend:latest
          - name: gateway
            context: ./gateway
            tag: kulevrina/taski_gateway:latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: ${{ matrix.image.context }}
        push: true
        tags: ${{ matrix.image.tag }}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
    - uses: actions/checkout@v3
    
    - name: Copy compose file
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.production.yml"
        target: "taski"

    - name: Deploy application
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd taski
          docker compose -f docker-compose.production.yml pull
          docker compose -f docker-compose.production.yml down
          docker compose -f docker-compose.production.yml up -d
          sleep 10
          docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --noinput

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send Telegram notification
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          ðŸš€ *Taski Deployment Successful*
          --------------------------
          *Repository*: [${{ github.repository }}](https://github.com/${{ github.repository }})
          *Commit*: [${{ format('{0:.7}', github.sha) }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          *Workflow*: [${{ github.workflow }} #${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
      env:
        TELEGRAM_PARSE_MODE: "Markdown"