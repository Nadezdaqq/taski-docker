name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  POSTGRES_USER: django_user
  POSTGRES_PASSWORD: django_password
  POSTGRES_DB: django_db
  DB_HOST: localhost
  DB_PORT: 5432

jobs:
  backend_tests:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r backend/requirements.txt

    - name: Run linters
      run: python -m flake8 backend/

    - name: Run Django tests
      env:
        DJANGO_SETTINGS_MODULE: backend.settings
      run: |
        cd backend
        python manage.py test

  frontend_tests:
    name: Run Frontend Tests
    runs-on: ubuntu-latest
    needs: backend_tests

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: "18"

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run tests
      run: |
        cd frontend
        npm run test

  build_and_push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [backend_tests, frontend_tests]
    strategy:
      matrix:
        image:
          - name: backend
            context: ./backend
            tag: kulevrina/taski_backend:latest
          - name: frontend
            context: ./frontend
            tag: kulevrina/taski_frontend:latest
          - name: gateway
            context: ./gateway
            tag: kulevrina/taski_gateway:latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: ${{ matrix.image.context }}
        push: true
        tags: ${{ matrix.image.tag }}

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build_and_push
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3
    
    - name: Copy compose file
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.production.yml"
        target: "taski"

    - name: Deploy application
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd taski
          docker compose -f docker-compose.production.yml pull
          docker compose -f docker-compose.production.yml down
          docker compose -f docker-compose.production.yml up -d
          docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --no-input
          docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/